#!/usr/bin/env python3
"""
Create a Cache class.
In the __init__ method, store an instance of the Redis client as
a private variable named _redis (using redis.Redis())
and flush the instance using flushdb.

Create a store method that takes a data argument and
returns a string. The method should generate a
random key (e.g. using uuid),
store the input data in Redis using the random key and
return the key.

Type-annotate store correctly.
Remember that data can be a str, bytes, int or float.
"""

import uuid
import redis
from typing import Union


class Cache ():
    """
    has an __init__ () which will store an instance of the Redis
    client as a private variable named _redis.
    """
    def __init__(self) -> None:
        """
        we create a variable redis, connect it to the Redis()
        database running, and the flush it to clear any contents.
        """
        self._redis = redis.Redis()
        self._redis.flushdb()

    """
    the same class is to have a store() which does have an argument
    data that gives a string as an output. However, the output is to
    be a random key generated by uuid and is to be stored in Redis along
    with the data.
    input data || random key || store them - i guess keys are the ids.
    """
    def store(self, data) -> str:
        """
        as described above
        """
        random_key = str(uuid.uuid4())
        self._redis.set(random_key, data)

        return random_key
